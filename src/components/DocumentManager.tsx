import React, { useState, useEffect } from 'react';
import { RAGService } from '../services/ragService';
import { ChunkedDocument } from '../utils/documentChunker';

interface DocumentManagerProps {
  isOpen: boolean;
  onClose: () => void;
}

export const DocumentManager: React.FC<DocumentManagerProps> = ({ isOpen, onClose }) => {
  const [ragService] = useState(() => RAGService.getInstance());
  const [documents, setDocuments] = useState<ChunkedDocument[]>([]);
  const [uploading, setUploading] = useState(false);
  const [stats, setStats] = useState(() => ragService.getStats());

  useEffect(() => {
    if (isOpen) {
      refreshDocuments();
    }
  }, [isOpen]);

  const refreshDocuments = () => {
    setDocuments(ragService.getDocuments());
    setStats(ragService.getStats());
  };

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (!file) return;

    if (!file.name.endsWith('.md')) {
      alert('Please upload a Markdown (.md) file');
      return;
    }

    setUploading(true);
    try {
      const content = await file.text();
      await ragService.addDocument(content, file.name);
      refreshDocuments();
      event.target.value = ''; // Reset input
    } catch (error) {
      console.error('Error uploading document:', error);
      alert('Failed to upload document. Please try again.');
    } finally {
      setUploading(false);
    }
  };

  const handleDelete = async (documentId: string) => {
    if (window.confirm('Are you sure you want to delete this document?')) {
      ragService.removeDocument(documentId);
      refreshDocuments();
    }
  };

  const handleClearAll = () => {
    if (window.confirm('Are you sure you want to delete all documents? This cannot be undone.')) {
      ragService.clearAllDocuments();
      refreshDocuments();
    }
  };

  const formatFileSize = (bytes: number): string => {
    if (bytes < 1024) return `${bytes} B`;
    if (bytes < 1024 * 1024) return `${(bytes / 1024).toFixed(1)} KB`;
    return `${(bytes / (1024 * 1024)).toFixed(1)} MB`;
  };

  const formatDate = (timestamp: number): string => {
    return new Date(timestamp).toLocaleDateString();
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl max-w-4xl w-full mx-4 max-h-[90vh] overflow-hidden">
        <div className="p-6 border-b border-gray-200">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold text-gray-900">Repository Analysis Documents</h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600"
            >
              ‚úï
            </button>
          </div>
          
          {/* Stats */}
          <div className="grid grid-cols-4 gap-4 mt-4 text-sm">
            <div className="bg-blue-50 p-3 rounded">
              <div className="text-blue-600 font-medium">{stats.totalDocuments}</div>
              <div className="text-blue-500">Documents</div>
            </div>
            <div className="bg-green-50 p-3 rounded">
              <div className="text-green-600 font-medium">{stats.totalChunks}</div>
              <div className="text-green-500">Chunks</div>
            </div>
            <div className="bg-purple-50 p-3 rounded">
              <div className="text-purple-600 font-medium">{stats.totalTokens.toLocaleString()}</div>
              <div className="text-purple-500">Tokens</div>
            </div>
            <div className="bg-orange-50 p-3 rounded">
              <div className="text-orange-600 font-medium">{stats.averageChunkSize}</div>
              <div className="text-orange-500">Avg Chunk Size</div>
            </div>
          </div>
        </div>

        <div className="p-6">
          {/* Upload Section */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Upload Repository Analysis
            </label>
            <div className="flex items-center space-x-4">
              <input
                type="file"
                accept=".md"
                onChange={handleFileUpload}
                disabled={uploading}
                className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              />
              {uploading && (
                <div className="text-blue-600">Uploading...</div>
              )}
            </div>
            <p className="text-xs text-gray-500 mt-1">
              Upload Markdown files generated by the repository analyzer tool
            </p>
          </div>

          {/* Documents List */}
          <div className="border rounded-lg overflow-hidden">
            <div className="bg-gray-50 px-4 py-2 border-b border-gray-200">
              <div className="flex justify-between items-center">
                <h3 className="font-medium text-gray-900">Uploaded Documents</h3>
                {documents.length > 0 && (
                  <button
                    onClick={handleClearAll}
                    className="text-red-600 hover:text-red-800 text-sm"
                  >
                    Clear All
                  </button>
                )}
              </div>
            </div>
            
            <div className="max-h-96 overflow-y-auto">
              {documents.length === 0 ? (
                <div className="p-8 text-center text-gray-500">
                  <div className="text-4xl mb-2">üìÑ</div>
                  <div>No documents uploaded yet</div>
                  <div className="text-sm">Upload a repository analysis to get started</div>
                </div>
              ) : (
                <div className="divide-y divide-gray-200">
                  {documents.map((doc) => (
                    <div key={doc.id} className="p-4 hover:bg-gray-50">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <h4 className="font-medium text-gray-900">{doc.title}</h4>
                          <p className="text-sm text-gray-500 mt-1">{doc.sourceFile}</p>
                          {doc.metadata.repositoryPath && (
                            <p className="text-xs text-gray-400 mt-1">
                              Repository: {doc.metadata.repositoryPath}
                            </p>
                          )}
                          <div className="flex items-center space-x-4 mt-2 text-xs text-gray-500">
                            <span>{doc.totalChunks} chunks</span>
                            <span>{formatFileSize(doc.metadata.totalSize)}</span>
                            <span>Added {formatDate(doc.createdAt)}</span>
                          </div>
                        </div>
                        <button
                          onClick={() => handleDelete(doc.id)}
                          className="text-red-600 hover:text-red-800 ml-4"
                          title="Delete document"
                        >
                          üóëÔ∏è
                        </button>
                      </div>
                      
                      {/* Sample chunks preview */}
                      <div className="mt-3">
                        <div className="text-xs text-gray-600 mb-1">Sample sections:</div>
                        <div className="flex flex-wrap gap-1">
                          {doc.chunks.slice(0, 5).map((chunk, index) => (
                            <span
                              key={index}
                              className="inline-block bg-gray-100 text-gray-700 text-xs px-2 py-1 rounded"
                            >
                              {chunk.section}
                            </span>
                          ))}
                          {doc.chunks.length > 5 && (
                            <span className="text-xs text-gray-500">
                              +{doc.chunks.length - 5} more
                            </span>
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="p-6 border-t border-gray-200 bg-gray-50">
          <div className="text-sm text-gray-600">
            <strong>How it works:</strong> Upload repository analysis documents to provide context for your conversations. 
            The system will automatically chunk and index the content for semantic search during chats.
          </div>
        </div>
      </div>
    </div>
  );
};